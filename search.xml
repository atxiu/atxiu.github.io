<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[OpenVPN搭建]]></title>
      <url>/OpenVPN.html</url>
      <content type="html"><![CDATA[<p>近日工作上有这样一个需求，某学校没有公网地址，但公司的业务对接需要公网地址的一个端口，要求是在不影响业务正常运行的情况下实现本次映射。对端对接地址是：10.0.0.2 提供了一台可操作服务器 10.0.0.3 ，本地我提供了可操作服务器：10.100.101.115，公网 nat 映射一应俱全。仔细思考过后，决定使用OpenVPN。实现如下：</p>
<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><h3 id="添加epel源"><a href="#添加epel源" class="headerlink" title="添加epel源"></a>添加epel源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum cleanall # 可选</span><br><span class="line">yum update # 可选</span><br><span class="line">yum makecache # 可选</span><br></pre></td></tr></table></figure>
<h3 id="安装openvpn-easy-rsa-firewalld"><a href="#安装openvpn-easy-rsa-firewalld" class="headerlink" title="安装openvpn easy-rsa firewalld"></a>安装openvpn easy-rsa firewalld</h3><p>任选其一，以防火墙为基础的端口转发</p>
<ul>
<li>CentOS 6.5    iptables    #这里对端提供的服务器是 CentOS 6.5，不支持firewalld</li>
<li>CentOS 7    firewalld    #本地服务器防火墙</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openvpn easy-rsa firewalld</span><br></pre></td></tr></table></figure>
<h3 id="配置easy-rsa"><a href="#配置easy-rsa" class="headerlink" title="配置easy-rsa"></a>配置easy-rsa</h3><p>在这一步生成一些证书</p>
<ul>
<li>CA证书</li>
<li>服务器证书和密钥</li>
<li>Diffie-Hellman密钥</li>
<li>客户端证书和密钥</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -r /usr/share/easy-rsa/ /etc/openvpn/</span><br><span class="line">cd /etc/openvpn/easy-rsa/2.*/</span><br><span class="line">vim vars</span><br></pre></td></tr></table></figure>
<p>确保<code>vars</code>中以下参数正确</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export KEY_SIZE=2048</span><br><span class="line">export CA_EXPIRE=3650</span><br><span class="line">export KEY_EXPIRE=3650</span><br><span class="line">export KEY_NAME=&quot;EasyRSA&quot;</span><br></pre></td></tr></table></figure>
<h3 id="生成服务器证书密钥和客户端证书密钥"><a href="#生成服务器证书密钥和客户端证书密钥" class="headerlink" title="生成服务器证书密钥和客户端证书密钥"></a>生成服务器证书密钥和客户端证书密钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">source ./vars #初始化证书授权中心</span><br><span class="line">./clean-all</span><br><span class="line"># 生成证书</span><br><span class="line"># Name [EasyRSA] 那一项写ca</span><br><span class="line">./build-ca</span><br><span class="line"># 生成服务器密钥和证书</span><br><span class="line"># 在challenge password和optional company name处留空</span><br><span class="line"># Name [EasyRSA] 那一项写server</span><br><span class="line"># 两个y选项选择y</span><br><span class="line">./build-key-server server</span><br><span class="line">./build-dh</span><br><span class="line"># 生成客户端密钥和证书</span><br><span class="line"># 在challenge password和optional company name处留空</span><br><span class="line"># Name [EasyRSA] 那一项写client</span><br><span class="line"># 两个y选项选择y</span><br><span class="line">./build-key client</span><br><span class="line">cd /etc/openvpn/easy-rsa/2.0/</span><br><span class="line">cp -r keys/ /etc/openvpn/</span><br></pre></td></tr></table></figure>
<h3 id="配置OpenVPN服务端"><a href="#配置OpenVPN服务端" class="headerlink" title="配置OpenVPN服务端"></a>配置OpenVPN服务端</h3><p>你可以从<code>/usr/share/doc/openvpn-*.*.*/sample/sample-config-files</code>中拷贝出配置文件(<em>.</em>.*是openvpn版本)，也可以自己新建配置文件，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/openvpn/</span><br><span class="line">cp /usr/share/doc/openvpn-*.*.*/sample/sample-config-files/server.conf /etc/openvpn</span><br><span class="line">vim server.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">local 0.0.0.0    #监听地址</span><br><span class="line">port 1194    #监听端口</span><br><span class="line">proto tcp    #监听协议</span><br><span class="line">dev tun    #采用路由隧道模式</span><br><span class="line">ca /etc/openvpn/keys/ca.crt    #证书路径</span><br><span class="line">cert /etc/openvpn/keys/server.crt    #服务器证书</span><br><span class="line">key /etc/openvpn/keys/server.key    #服务器密钥</span><br><span class="line">dh /etc/openvpn/keys/dh2048.pem     #密钥交换协议文件</span><br><span class="line">server 192.168.200.0 255.255.255.0    #给客户端分配地址池，注意：不能和VPN服务器内网网段有相同</span><br><span class="line">push &quot;route 10.100.101.115 255.255.255.255&quot;  #向客户端推送10.100.101.115并允许客户端访问10.100.101.115的地址</span><br><span class="line">;push&quot;dhcp-option DNS 8.8.8.8&quot;              #dhcp分配dns，可选</span><br><span class="line">client-to-client    #客户端之间互相通信</span><br><span class="line">keepalive 10 120    #存活时间，10秒ping一次,120 如未收到响应则视为断线</span><br><span class="line">cipher AES-256-CBC    #加密方式 参考Shadowsocks</span><br><span class="line">comp-lzo    #传输数据压缩</span><br><span class="line">max-clients 100    #最多允许 100 客户端连接</span><br><span class="line">user nobody  #用户</span><br><span class="line">group nobody  #用户组</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">reneg-sec 900    #可选，这里设置15分钟</span><br><span class="line">status    /var/log/openvpn/openvpn-status.log</span><br><span class="line">log    /var/log/openvpn/openvpn.log</span><br><span class="line">verb 3</span><br><span class="line">#OpenVPN在服务器和客户端都有一个参数 reneg-sec n，该参数是指n秒钟之后重新验证key。默认值为3600s，该参数值以服务器和客户端的最小reneg-sec为最终决定重新验证的时间。例如：如果服务器上设定了3000s，即使你客户端设置30000s，最终重新验证key值仍是3000s</span><br></pre></td></tr></table></figure>
<p>设置允许IP转发，在<code>/etc/sysctl.conf</code>文件中添加一行<code>net.ipv4.ip_forward = 1</code><br><code>sysctl -p</code></p>
<h3 id="配置firewalld端口转发"><a href="#配置firewalld端口转发" class="headerlink" title="配置firewalld端口转发"></a>配置firewalld端口转发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#启动防火墙</span><br><span class="line">systemctl start firewalld</span><br><span class="line">#添加OpenVPN连接用端口1194和映射用端口8080 下由注释</span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=openvpn</span><br><span class="line">#由于我这边直接添加OpenVPN服务TCP端口起不来，所以再添加一条规则，上一条起作用了就不用配</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=1194/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=webcache</span><br><span class="line">#在防火墙上添加端口 8080，把本机 8080 端口收到的数据转发到 192.168.200.6 的 18080 端口</span><br><span class="line">firewall-cmd --permanent --zone=public --add-forward-port=port=8080:proto=tcp:toport=18080:toaddr=192.168.200.6</span><br></pre></td></tr></table></figure>
<ul>
<li>为什么这里添加1194和8080端口是写成openvpn和webcache，因为这两个服务的端口已经被写入linux系统了，映射服务名即可映射对应端口，便于识别，但也可以直接使用端口8080 2012 9090</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/services | grep 8080</span><br><span class="line">webcache        8080/tcp        http-alt        # WWW caching service</span><br><span class="line">webcache        8080/udp        http-alt        # WWW caching service</span><br><span class="line">cat /etc/services | grep openvpn</span><br><span class="line">openvpn         1194/tcp                # OpenVPN</span><br><span class="line">openvpn         1194/udp                # OpenVPN</span><br></pre></td></tr></table></figure>
<ul>
<li>直接使用端口,这样的好处是可以自定义端口，还可以指定通过的协议。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=1194/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br></pre></td></tr></table></figure>
<ul>
<li>在不停止服务的情况下重新加载防火墙</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="查看防火墙配置"><a href="#查看防火墙配置" class="headerlink" title="查看防火墙配置"></a>查看防火墙配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: </span><br><span class="line">  services: ssh dhcpv6-client dns openvpn webcache</span><br><span class="line">  ports: 1194/tcp</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: yes</span><br><span class="line">  forward-ports: port=8080:proto=tcp:toport=18080:toaddr=192.168.200.6</span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules:</span><br></pre></td></tr></table></figure>
<h3 id="firewalld和OpenVPN开机启动"><a href="#firewalld和OpenVPN开机启动" class="headerlink" title="firewalld和OpenVPN开机启动"></a>firewalld和OpenVPN开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##防火墙设置开机启动</span><br><span class="line">systemctl enable firewalld</span><br><span class="line">##服务端启动和开机启动</span><br><span class="line">systemctl start openvpn@server</span><br><span class="line">systemctl enable openvpn@server</span><br></pre></td></tr></table></figure>
<h2 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h2><h3 id="安装openvpn-iptables"><a href="#安装openvpn-iptables" class="headerlink" title="安装openvpn iptables"></a>安装openvpn iptables</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openvpn iptables nginx</span><br></pre></td></tr></table></figure>
<h3 id="配置OpenVPN客户端"><a href="#配置OpenVPN客户端" class="headerlink" title="配置OpenVPN客户端"></a>配置OpenVPN客户端</h3><p>你可以从<code>/usr/share/doc/openvpn-*.*.*/sample/sample-config-files</code>中拷贝出配置文件(<em>.</em>.*是openvpn版本)，也可以自己新建配置文件，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/openvpn/</span><br><span class="line">cp /usr/share/doc/openvpn-*.*.*/sample/sample-config-files/client.conf /etc/openvpn</span><br><span class="line">vim client.conf</span><br><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto tcp    #监听协议，和服务端一致</span><br><span class="line">remote my-server-2 1194    #这里是服务器映射出来的公网地址和端口</span><br><span class="line">nobind</span><br><span class="line">user nobody</span><br><span class="line">group nobody</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">ca /etc/openvpn/keys/ca.crt    #这里是从服务器拷过来的ca证书</span><br><span class="line">cert /etc/openvpn/keys/client.crt    #这里是从服务器拷过来的客户端证书</span><br><span class="line">key /etc/openvpn/keys/client.key    #这里是从服务器拷过来的客户端密钥</span><br><span class="line">cipher AES-256-CBC    #加密方式，和服务端一致</span><br><span class="line">reneg-sec 900    #可选，这里和服务器端一致</span><br><span class="line">comp-lzo    #传输数据压缩，和服务器端一致</span><br><span class="line">verb 3</span><br></pre></td></tr></table></figure>
<ul>
<li>拷贝服务器端的/etc/openvpn/easy-rsa/{ca.crt,client.crt,client.key}到客户端的主机 /etc/openvpn/keys/目录下，没有就新建一个</li>
</ul>
<h3 id="客户端做反向代理"><a href="#客户端做反向代理" class="headerlink" title="客户端做反向代理"></a>客户端做反向代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install </span><br><span class="line">vim /etc/nginx/conf.d/default.conf</span><br><span class="line">server &#123;</span><br><span class="line">    // 当通过 10.0.0.3:18080 端口访问这个服务器时</span><br><span class="line">    // 该请求会被转发到 10.0.0.2:8080</span><br><span class="line">    listen       18080 ;</span><br><span class="line">    location / &#123;</span><br><span class="line">            //物理机能访问到的web服务都可以做代理</span><br><span class="line">            //客户端反向代理端口要和服务端出口映射端口一致，不然无法登录</span><br><span class="line">            proxy_pass  http://10.0.0.2:8080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置iptables端口转发"><a href="#配置iptables端口转发" class="headerlink" title="配置iptables端口转发"></a>配置iptables端口转发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service iptables start</span><br><span class="line">#将外网访问 192.168.200.6 的 18080 端口转发到 10.0.0.3:18080 端口。</span><br><span class="line">iptables -t nat -A PREROUTING -d 192.168.200.6 -p tcp --dport 18080 -j DNAT --to-destination 10.0.0.3:18080</span><br><span class="line">#将 10.0.0.3 18080 端口将数据返回给客户端时，将源 ip 改为 192.168.200.6</span><br><span class="line">iptables -t nat -A POSTROUTING -d 10.0.0.3 -p tcp --dport 18080 -j SNAT --to 192.168.200.6</span><br></pre></td></tr></table></figure>
<h3 id="iptables和nginx开机启动"><a href="#iptables和nginx开机启动" class="headerlink" title="iptables和nginx开机启动"></a>iptables和nginx开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service nginx start    #启动反向代理</span><br><span class="line">chkconfig nginx on    #开机启动反向代理</span><br><span class="line">service iptables start   #启动端口转发</span><br><span class="line">chkconfig iptables on    #开机启动端口转发</span><br></pre></td></tr></table></figure>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/iptables start     # 开启防火墙，或者service iptables start，以下同理</span><br><span class="line">/etc/init.d/iptables stop      # 停止防火墙</span><br><span class="line">/etc/init.d/iptables restart   # 重启防火墙</span><br><span class="line">/etc/init.d/iptables status    # 查看端口状态</span><br><span class="line">/etc/init.d/iptables save      # 保存配置</span><br><span class="line">/etc/init.d/iptables -t nat --list    #查看nat状态</span><br><span class="line">/etc/init.d/iptables -t nat -F #清空nat</span><br><span class="line">chkconfig iptables off         # 永久关闭防火墙</span><br><span class="line">chkconfig iptables on          # 永久关闭后启用</span><br></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么要建博客]]></title>
      <url>/Why.html</url>
      <content type="html"><![CDATA[<h2 id="碎片化时间整理和利用"><a href="#碎片化时间整理和利用" class="headerlink" title="碎片化时间整理和利用"></a>碎片化时间整理和利用</h2><ul>
<li>做网络运维这行业，碎片时间很多，但几乎没有利用起来。</li>
<li>平时也喜欢研究一些技术，总是发现明明自己实现过的技术还要去翻技术文档，从头再去做研究，甚至重复造轮子。这样对碎片时间造成了严重浪费。</li>
<li>做一个博客可以避免以后涉及到某个知识再去寻找技术文档的麻烦。</li>
<li>以前学习一个新的技术点，喜欢在浏览器里收藏一堆教程，但真正自己写的时候还是非常陌生，又要重新去读一遍，典型的<strong>“眼高手低”</strong>，很多东西还是需要自己去实践，只有这样，才能把这些变成自己的东西(这句话是抄的)</li>
<li>心态上，记录下来自己的想法不是为了炫耀，受益的是自己</li>
</ul>
<a id="more"></a>
<h2 id="为什么使用Hexo驱动"><a href="#为什么使用Hexo驱动" class="headerlink" title="为什么使用Hexo驱动"></a>为什么使用Hexo驱动</h2><p>觉得这玩意比较优雅，比较流行。</p>
<h2 id="建博客想法"><a href="#建博客想法" class="headerlink" title="建博客想法"></a>建博客想法</h2><p>想记录自己试验中的想法和灵感，为以后的我提供所不及的思维历程。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Lychee开源图床搭建]]></title>
      <url>/Lychee.html</url>
      <content type="html"><![CDATA[<p>哎呀，博客想存图，咋办呢。强迫症，用别人的不放心，干脆自己搭建一个吧</p>
<p>一款开源的图片管理系统，实际上可以当图床用，计划中</p>
<p><a href="https://github.com/electerious/Lychee" target="_blank" rel="noopener">https://github.com/electerious/Lychee</a></p>
<h2 id="更新问题"><a href="#更新问题" class="headerlink" title="更新问题"></a>更新问题</h2><p>什么？你问我什么时候更新？这是一个好问题</p>
<a id="more"></a>]]></content>
      
        
        <tags>
            
            <tag> Lychee </tag>
            
            <tag> 图床 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7系统搭建Shadowsocks-libev服务器，兼容绝地求生，愉快吃鸡]]></title>
      <url>/Shadowsocks.html</url>
      <content type="html"><![CDATA[<p>最近吃鸡很火啊，现象级游戏真是可怕，社会社会。不过想要吃鸡呢，得有个好的加速器，现在市面上的加速器个个收费，不然就是绑定各种流氓，像某管家、某60。真是怀念几年前的时光，加速器个个免费，代理一搜一大把，用个花刺畅游世界，还能顺路刷个钻-.-。</p>
<p>扯远了，加速器收费，价格不低，免费的体验差又不想用，干脆自己搭建一个。</p>
<a id="more"></a>
<h2 id="安装Shadowsocks-libev"><a href="#安装Shadowsocks-libev" class="headerlink" title="安装Shadowsocks-libev"></a>安装Shadowsocks-libev</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release yum-plugin-copr</span><br><span class="line">yum copr enable librehat/shadowsocks</span><br><span class="line">yum update</span><br><span class="line">yum install shadowsocks-libev</span><br></pre></td></tr></table></figure>
<h2 id="配置Shadowsocks-libev"><a href="#配置Shadowsocks-libev" class="headerlink" title="配置Shadowsocks-libev"></a>配置Shadowsocks-libev</h2><p>创建配置文件，例：/etc/shadowsocks-libev/hk.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"my_server_ip"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"123456"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"chacha20-ietf-poly1305"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>json文件注解：</p>
<ul>
<li>server    服务器地址，这里要改成自己服务器的ip或者域名</li>
<li>server_port    Shadowsocks服务器端口，这里要和防火墙放通的端口一致</li>
<li>password    Shadowsocks密码</li>
<li>timeout    超时时间</li>
<li>method    加密方式，默认：“aes-256-cfb”</li>
</ul>
<p>附官方注解：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>server</td>
<td>the address your server listens</td>
</tr>
<tr>
<td>server_port</td>
<td>server port</td>
</tr>
<tr>
<td>local_address</td>
<td>the address your local listens</td>
</tr>
<tr>
<td>local_port</td>
<td>local port</td>
</tr>
<tr>
<td>password</td>
<td>password used for encryption</td>
</tr>
<tr>
<td>timeout</td>
<td>in seconds</td>
</tr>
<tr>
<td>method</td>
<td>default: “aes-256-cfb”, see <a href="https://github.com/shadowsocks/shadowsocks/wiki/Encryption" target="_blank" rel="noopener">Encryption</a></td>
</tr>
<tr>
<td>fast_open</td>
<td>use <a href="https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open" target="_blank" rel="noopener">TCP_FASTOPEN</a>, true / false</td>
</tr>
<tr>
<td>workers</td>
<td>number of workers, available on Unix/Linux</td>
</tr>
</tbody>
</table>
<h2 id="配置以systemctl服务方式启动"><a href="#配置以systemctl服务方式启动" class="headerlink" title="配置以systemctl服务方式启动"></a>配置以systemctl服务方式启动</h2><p>新建启动服务文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/systemd/system/shadowsocks.service</span><br><span class="line">或</span><br><span class="line">/usr/lib/systemd/system/shadowsocks.service</span><br></pre></td></tr></table></figure>
<p>内容如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=ShadowSocks</span><br><span class="line">After=syslog.target network.target auditd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=nobody</span><br><span class="line">ExecStart=/usr/bin/ss-server -c /etc/shadowsocks/hk.json -u</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：如果服务端口小于1024，则需要改为user=root</p>
<p>ss-server 参数注解</p>
<ul>
<li>-c 指向配置文件路径</li>
</ul>
<ul>
<li>-u 启用UDP中继。</li>
<li>-U 启用UDP中继并禁用TCP中继。</li>
</ul>
<h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><p>如果开启了防火墙，需要放通Shadowsocks-libev端口</p>
<p>例如，对于Firewall，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=8388/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=8388/udp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h2 id="加入开启启动，以及启动服务、查看状态"><a href="#加入开启启动，以及启动服务、查看状态" class="headerlink" title="加入开启启动，以及启动服务、查看状态"></a>加入开启启动，以及启动服务、查看状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable shadowsocks</span><br><span class="line">systemctl start shadowsocks</span><br><span class="line">systemctl status shadowsocks</span><br></pre></td></tr></table></figure>
<h2 id="取消开启启动，以及停止服务"><a href="#取消开启启动，以及停止服务" class="headerlink" title="取消开启启动，以及停止服务"></a>取消开启启动，以及停止服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable shadowsocks</span><br><span class="line">systemctl stop shadowsocks</span><br></pre></td></tr></table></figure>
<h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><p><img src="//atxiu.cn/Snipaste/Snipaste_2017-11-14_14-01-08.png" alt="Snipaste_2017-11-14_14-01-08"></p>
<p>不说了，我送快递去了。</p>
<h2 id="可选内容-锐速单边加速"><a href="#可选内容-锐速单边加速" class="headerlink" title="可选内容 (锐速单边加速)"></a>可选内容 (锐速单边加速)</h2><p>更换内核支持锐速</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh https://buildlogs.centos.org/c7.1511.00/kernel/20151119220809/3.10.0-327.el7.x86_64/kernel-3.10.0-327.el7.x86_64.rpm --force</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh &amp;&amp; bash serverspeeder.sh</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Shadowsocks-libev </tag>
            
            <tag> Shadowsocks </tag>
            
            <tag> 吃鸡 </tag>
            
            <tag> Playerunknown&#39;s Battlegrounds </tag>
            
            <tag> 加速 </tag>
            
            <tag> PUBG </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
